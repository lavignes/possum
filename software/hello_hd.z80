HD_PORT:
	@defn .DATA,	$80
	@defn .ERR,	$81
	@defn .FEAT,	$81
	@defn .SEC_CNT,	$82
	@defn .SEC_NUM,	$83
	@defn .CYL_LO,	$84
	@defn .CYL_HI,	$85
	@defn .HEAD,	$86
	@defn .STAT,	$87
	@defn .CMD,	$87

HD_FEAT:
	@defn .BITS8,	$01

HD_STAT:
	@defn .ERR,	$01
	@defn .BSY,	$80

@defn HD_DRIVE0,		$e0
@defn HD_DRIVE1,		$f0

HD_CMD:
	@defn .DIAG,	$90
	@defn .ERASE,	$c0
	@defn .IDENT,	$ec
	@defn .NOP,	$00
	@defn .RD,	$20
	@defn .FEAT,	$ef
	@defn .WR,	$30

@defn HDIdent.size_len,		4
@defn HDIdent.serial_len,	20
@defn HDIdent.model_len,	40
@struct HDIdent
    @ds $0e
	size .size_len

    @align $14
	serial .serial_len

    @align $36
	model .model_len
@endstruct

@echo HDIdent.size

@assert HDIdent.size	== $0e
@assert HDIdent.serial	== $14
@assert HDIdent.model	== $36

@defn PIPE_PORT, $f0

start:
	ld sp, $ffff

	call hd_8bit
	call c, err
	call hd_ident
	call c, err

	ld hl, HD_MSG_MODEL
	ld b, HD_MSG_MODEL.len
	call pip_wr

	ld hl, SECTOR_BUF + HDIdent.model
	ld b, HDIdent.model_len
	call pip_wrln

	ld hl, HD_MSG_SERIAL
	ld b, HD_MSG_SERIAL.len
	call pip_wr

	ld hl, SECTOR_BUF + HDIdent.serial
	ld b, HDIdent.serial_len
	call pip_wrln

	ld hl, HD_MSG_SIZE
	ld b, HD_MSG_SIZE.len
	call pip_wr

	ld a, '$'
	call pip_wrc
	ld de, SECTOR_BUF + HDIdent.size + HDIdent.size_len - 1
	ld a, (de)
	call pip_wrx
	dec de
	ld a, (de)
	call pip_wrx
	dec de
	ld a, (de)
	call pip_wrx
	dec de
	ld a, (de)
	call pip_wrx
	ld a, '\r'
	call pip_wrc
	ld a, '\n'
	call pip_wrc

	ld de, $0000
	ld hl, $0000
	call hd_lba
	call hd_rd
	jr c, err

	ld hl, HELLO_MSG
	ld de, SECTOR_BUF
	ld b, HELLO_MSG.len
.cpy:
	ld a, (hl)
	ex de, hl
	ld (hl), a
	ex de, hl
	inc hl
	inc de
	djnz .cpy

	ld de, $0000
	ld hl, $0000
	call hd_lba
	call hd_wr
	jr c, err

	ld hl, HELLO_MSG
	ld b, HELLO_MSG.len
	call pip_wrln

	jr exit

err:
	push af
	ld hl, HD_MSG_ERR
	ld b, HD_MSG_ERR.len
	call pip_wr
	ld a, '$'
	pop af
	call pip_wrx

exit:
	in a, (PIPE_PORT)
	set 5, a	; lowercase ASCII
	cp 'q'
	jr nz, exit

	halt

hd_8bit:
	call hd_wait
	ld a, HD_FEAT.BITS8
	out (HD_PORT.FEAT), a
	ld a, HD_CMD.FEAT
	out (HD_PORT.CMD), a
	jp hd_err

hd_ident:
	call hd_wait
	ld a, HD_CMD.IDENT
	out (HD_PORT.CMD), a
	call hd_err
	ret c
	jp hd_bufin

hd_rd:
	call hd_wait
	ld a, HD_CMD.RD
	out (HD_PORT.CMD), a
	call hd_err
	ret c
	jp hd_bufin

hd_wr:
	call hd_wait
	ld a, HD_CMD.WR
	out (HD_PORT.CMD), a
	call hd_err
	ret c
	jp hd_bufout

hd_lba:
	ld a, e
	out (HD_PORT.SEC_NUM), a
        ld a, d
	out (HD_PORT.CYL_LO), a
	ld a, l
	out (HD_PORT.CYL_HI), a
	ld a, h
	and $0f
	or HD_DRIVE0
	out (HD_PORT.HEAD), a
	ret

hd_bufin:
	ld de, 512
	ld hl, SECTOR_BUF
.inb:
	call hd_wait
	in a, (HD_PORT.DATA)
	ld (hl), a
	inc hl
	dec de
	ld a, d
	or e
	jp nz, .inb
	jp hd_err

hd_bufout:
	ld de, 512
	ld hl, SECTOR_BUF
.outb:
	call hd_wait
	ld a, (hl)
	out (HD_PORT.DATA), a
	inc hl
	dec de
	ld a, d
	or e
	jp nz, .outb
	jp hd_err

hd_err:
	call hd_wait
	in a, (HD_PORT.STAT)
	and HD_STAT.ERR
	ret z
	scf
	in a, (HD_PORT.ERR)
	ret

hd_wait:
	ld b, HD_STAT.BSY
.loop:
	in a, (HD_PORT.STAT)
	and b
	jr nz, .loop
	ret

pip_wrx:
	ld c, a
	rra
	rra
	rra
	rra
	call .wr_low_nibble
	ld a, c
.wr_low_nibble:
	and $0f
	add a, $90
	daa
	adc a, $40
	daa
	out (PIPE_PORT), a
	ret

pip_wrc:
	out (PIPE_PORT), a
	ret

pip_wr:
	ld a, (hl)
	out (PIPE_PORT), a
	inc hl
	djnz pip_wr
	ret

pip_wrln:
	call pip_wr
	ld a, '\r'
	out (PIPE_PORT), a
	ld a, '\n'
	out (PIPE_PORT), a
	ret

HELLO_MSG:
	@db "Hello! Successfully wrote to the disk!"
	@defn .len, @here - HELLO_MSG

HD_MSG_MODEL:
	@db "Model Name:\t"
	@defn .len, @here - HD_MSG_MODEL

HD_MSG_SERIAL:
	@db "Serial #:\t"
	@defn .len, @here - HD_MSG_SERIAL

HD_MSG_SIZE:
	@db "Disk Size:\t"
	@defn .len, @here - HD_MSG_SIZE

HD_MSG_ERR:
	@db "Disk error:\t"
	@defn .len, @here - HD_MSG_ERR

SECTOR_BUF:
	@ds $100
	@defn .len, @here - SECTOR_BUF 
